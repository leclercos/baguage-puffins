<?php

namespace Parc\PuffinsBagBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * DonneesPrincipalesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DonneesPrincipalesRepository extends EntityRepository
{
	public function getPuffins($nombreParPage, $page)
	{
		$query = $this->createQueryBuilder('pr')
				->orderBy('pr.id', 'DESC')
				->getQuery();
		$query->setFirstResult(($page-1) * $nombreParPage)
			->setMaxResults($nombreParPage);
			
		return new Paginator($query);
	}
	
	public function getPuffinsBy($nombreParPage, $colonne, $order, $page)
	{
		$query = $this->createQueryBuilder('pr')
				->orderBy('pr.'.$colonne, $order)
				->getQuery();
		$query->setFirstResult(($page-1) * $nombreParPage)
			->setMaxResults($nombreParPage);
		
		return new Paginator($query);
	}
	
	public function getPuffin($id)
	{
		$query = $this->createQueryBuilder('pr')
				->leftJoin('pr.cartouche', 'ca')
				->addSelect('ca')
				->leftJoin('pr.donneesComplementaires', 'cp')
				->addSelect('cp')
				->leftJoin('pr.donneesLocalisation', 'lo')
				->addSelect('lo')
				->leftJoin('lo.bagueur', 'ba')
				->addSelect('ba')
				->leftJoin('pr.donneesPNPC', 'pn')
				->addSelect('pn')
				->leftJoin('pr.autresMesures', 'am')
				->addSelect('am')
				->where('pr.id = :id')
				->setParameter('id', $id);
				
		return $query->getQuery()
					->getArrayResult();
	}
	
	private function allPuffinsQuerry($crbpo)
	{	
		$query = $this->createQueryBuilder('pr')
					->leftJoin('pr.donneesLocalisation', 'lo')
					->leftJoin('lo.bagueur', 'ba')
					->leftJoin('pr.donneesComplementaires', 'cp');
		if($crbpo){
			$query = $query->select("lo.theme, lo.centre, ba.nomCRBPO as bagueur,
							pr.bg, pr.bague, pr.action, pr.espece, pr.date, pr.heure,pr.sexe, pr.age,
							 lo.pays, lo.dept, lo.localite, pr.lieudit, cp.bp, cp.eb, cp.lt, cp.ma,
							 cp.memo, pr.condRepr, pr.circRepr, cp.cs, cp.nf, cp.ptd as partenaire");  		
		}else{
			//$query = $this->createQueryBuilder('pr')  CONCAT(cp.pr1, " et ", cp.pr2)
			$query = $query->leftJoin('pr.donneesPNPC', 'pn')
							->leftJoin('pr.autresMesures', 'am')			
				->select('lo.codeIle, ba.nomCRBPO as bagueur, 
						 pr.lieudit, pr.bg, pr.sg, pr.espece, pr.action, pr.condRepr, pr.circRepr, pr.bague,
						 pr.date, pr.heure, pr.sexe, pr.age, pr.colonie, pr.secteur, pr.terrier, cp.bp, cp.eb, cp.lt, cp.ma, 
						 cp.nature, cp.rmqTerrier, cp.periodeJN, lo.theme, lo.centre, lo.pays, lo.dept, lo.localite, cp.stade, cp.lp, cp.memo,
						 pn.primaire, pn.secondaire, pn.rectrice, pn.couV, pn.couD, pn.rg, pn.pl, pn.pr, pn.asg,
						 am.champ1, am.champ2, am.champ3, am.champ4, am.mesure1, am.mesure2, am.mesure3, am.mesure4');
		}
		return $query;
	}
	
	public function getAllPuffins()
	{
		$query = $this->allPuffinsQuerry(true);
				
		return $query->getQuery()
					->getArrayResult();
	}
	
	public function getAllPuffins2()
	{
		$query = $this->allPuffinsQuerry(true);
					
		return $query->getQuery()
					 ->iterate();
	}
	
	private function findPuffinsQuerry($query, $champs, $valeurs_arr)
	{
		$i = 0;
		$params = $this->combinerCriteresValeurs($champs,$valeurs_arr);
		
		foreach($params as $critere => $valeurs)
		{
			$nb = count($valeurs);
			if ($critere === 'date'){
				$dated=new \DateTime('01/01/'.$valeurs[0].'');
				$datef=new \DateTime('12/31/'.$valeurs[0].'');
				
				$query->andwhere('pr.date BETWEEN :dated and :datef')
					  ->setParameter('dated',$dated)
					  ->setParameter('datef',$datef);
			}else if($critere === 'bague'){				
				$qu_str = 'lower(pr.bague) like lower(:valeur'.$i.') OR lower(cp.pr1) like lower(:valeur'.$i.') 
						  OR lower(cp.pr2) like lower(:valeur'.$i.') OR lower(cp.ptd) like lower(:valeur'.$i.')';

				//$qu_str = $qu_str1;
				for($j=1;$j<$nb;$j++){
					$i++;
					$qu_str = $qu_str .' OR lower(pr.bague) like lower(:valeur'.$i.') OR lower(cp.pr1) like lower(:valeur'.$i.') 
						  OR lower(cp.pr2) like lower(:valeur'.$i.') OR lower(cp.ptd) like lower(:valeur'.$i.')';
					$query ->setParameter('valeur'.$i,'%'.$valeurs[$j].'%');
				}
				$query->andwhere($qu_str)
					 ->setParameter('valeur'.$i,'%'.$valeurs[0].'%');
				
			}else if($critere === 'bagueur'){					  
				$qu_str = 'lower(ba.nomCRBPO) like lower(:valeur'.$i.')';
				
				$nb = count($valeurs);
				for($j=1;$j<$nb;$j++){
					$i++;
					$qu_str = $qu_str .' OR lower(ba.nomCRBPO) like lower(:valeur'.$i.')';
					$query ->setParameter('valeur'.$i,'%'.$valeurs[$j].'%');
				}
				$query->andwhere($qu_str)
					  ->setParameter('valeur'.$i,'%'.$valeurs[0].'%');
				
			}else{
				$qu_str = 'lower(pr.'.$critere.') like lower(:valeur'.$i.')';
				
				for($j=1;$j<$nb;$j++){
					$i++;
					$qu_str = $qu_str .' OR lower(pr.'.$critere.') like lower(:valeur'.$i.')';
					$query ->setParameter('valeur'.$i,'%'.$valeurs[$j].'%');
				}
				$query->andwhere($qu_str)
					  ->setParameter('valeur'.$i,'%'.$valeurs[0].'%');
			}
			$i++;
		}
		
		return $query;
	}
	
	public function findPuffinsBy($champs, $valeurs, $nombreParPage, $colonne_tri, $order, $page)
	{
		$query = $this->createQueryBuilder('pr')
					->leftJoin('pr.donneesComplementaires', 'cp')
					->addSelect('cp')
					->leftJoin('pr.donneesLocalisation', 'lo')
					->addSelect('lo')
					->leftJoin('lo.bagueur', 'ba')
					->addSelect('ba');
		
		$query= $this->findPuffinsQuerry($query, $champs, $valeurs);
		
		//$query = $query->orderBy('pr.date', 'DESC')
		$query = $query->orderBy('pr.'.$colonne_tri, $order)		
				->getQuery();
		$query->setFirstResult(($page-1) * $nombreParPage)
			  ->setMaxResults($nombreParPage);
		
		return new Paginator($query);
	}
	
	public function findAllPuffinsBy($champs, $valeurs, $crbpo)
	{
		$query = $this->allPuffinsQuerry($crbpo);
		
		$query=$this->findPuffinsQuerry($query, $champs, $valeurs);
				
		return $query->getQuery()
					->getArrayResult();
	}
	
	private function combinerCriteresValeurs($champs_arr, $valeurs_arr){
	
		$criteres = array_unique($champs_arr);		
		$criteres_valeurs = array();
		foreach($criteres as $crit){
			$nb = count($champs_arr);
			$valeurs  = array();
			for ($i=0;$i<$nb;$i++){
				if($crit === $champs_arr[$i]){
					$valeurs[] = $valeurs_arr[$i];
				}
			}
			$criteres_valeurs[$crit] = $valeurs;
		}
		return $criteres_valeurs;
	}
}
