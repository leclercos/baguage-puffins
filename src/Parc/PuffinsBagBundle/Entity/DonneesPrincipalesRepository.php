<?php

namespace Parc\PuffinsBagBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * DonneesPrincipalesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DonneesPrincipalesRepository extends EntityRepository
{
	public function getPuffins($nombreParPage, $page)
	{
		$query = $this->createQueryBuilder('pr')
				->orderBy('pr.id', 'DESC')
				->getQuery();
		$query->setFirstResult(($page-1) * $nombreParPage)
			->setMaxResults($nombreParPage);
			
		return new Paginator($query);
	}
	
	public function getPuffinsBy($nombreParPage, $colonne, $order, $page)
	{
		$query = $this->createQueryBuilder('pr')
				->orderBy('pr.'.$colonne, $order)
				->getQuery();
		$query->setFirstResult(($page-1) * $nombreParPage)
			->setMaxResults($nombreParPage);
		
		return new Paginator($query);
	}
	
	public function getPuffin($id)
	{
		$query = $this->createQueryBuilder('pr')
				->leftJoin('pr.cartouche', 'ca')
				->addSelect('ca')
				->leftJoin('pr.donneesComplementaires', 'cp')
				->addSelect('cp')
				->leftJoin('pr.donneesLocalisation', 'cr')
				->addSelect('cr')
				->leftJoin('pr.donneesPNPC', 'pn')
				->addSelect('pn')
				->leftJoin('pr.autresMesures', 'am')
				->addSelect('am')
				->where('pr.id = :id')
				->setParameter('id', $id);
				
		return $query->getQuery()
					->getArrayResult();
	}
	
	public function allPuffinsQuerry()
	{
		$query = $this->createQueryBuilder('pr')
				->select('pr.id, pr.lieudit, pr.bg, pr.sg, pr.espece, pr.action, pr.condRepr, pr.circRepr, pr.bague,
						 pr.colonie, pr.secteur, pr.terrier, pr.date, pr.heure, pr.sexe, pr.age')
				->leftJoin('pr.donneesComplementaires', 'cp')
				->addSelect('cp.nature, cp.rmqTerrier, cp.periodeJN, cp.stade, cp.lp, cp.memo, 
							cp.bc, cp.bh, cp.lt, cp.ma')
				->leftJoin('pr.donneesLocalisation', 'lo')
				->addSelect('lo.bagueur, lo.codeIle, lo.theme, lo.centre, lo.pays, lo.dept, lo.localite')
				->leftJoin('pr.donneesPNPC', 'pn')
				->addSelect('pn.primaire, pn.secondaire, pn.rectrice, pn.couV, 
							pn.couD, pn.rg, pn.pl, pn.pr, pn.asg')
				->leftJoin('pr.autresMesures', 'am')
				->addSelect('am.champ1, am.champ2, am.champ3, am.champ4, am.mesure1, am.mesure2, am.mesure3, am.mesure4');
				
		return $query;
	}
	
	public function getAllPuffins()
	{
		$query = $this->allPuffinsQuerry();
				
		return $query->getQuery()
					->getArrayResult();
	}
	
	public function getAllPuffins2()
	{
		$query = $this->allPuffinsQuerry();
					
		return $query->getQuery()
					 ->iterate();
	}
	
	public function findPuffinsQuerry($query, $champs, $valeurs)
	{
		$nb=count($champs);
		
		for($i=0;$i<$nb;$i++)
		{
			if ($champs[$i]=='date')
			{
				$dated=new \DateTime('01/01/'.$valeurs[$i].'');
				$datef=new \DateTime('12/31/'.$valeurs[$i].'');
				
				$query->andwhere('pr.'.$champs[$i].' BETWEEN :valeur'.$i.' and :valeur2')
					  ->setParameter('valeur'.$i,$dated)
					  ->setParameter('valeur2',$datef);
			}
			else{
				$query->andwhere('lower(pr.'.$champs[$i].') like lower(:valeur'.$i.')')
					  ->setParameter('valeur'.$i,'%'.$valeurs[$i].'%');
			}
		}
		
		return $query;
	}
	
	public function findPuffinsBy($champs, $valeurs, $nombreParPage, $colonne_tri, $order, $page)
	{
		$query = $this->createQueryBuilder('pr');
		
		$query= $this->findPuffinsQuerry($query, $champs, $valeurs);
		
		//$query = $query->orderBy('pr.date', 'DESC')
		$query = $query->orderBy('pr.'.$colonne_tri, $order)		
				->getQuery();
		$query->setFirstResult(($page-1) * $nombreParPage)
			  ->setMaxResults($nombreParPage);
		
		return new Paginator($query);
	}
	
	public function findAllPuffinsBy($champs, $valeurs)
	{
		$query = $this->allPuffinsQuerry();
		
		$query=$this->findPuffinsQuerry($query, $champs, $valeurs);
				
		return $query->getQuery()
					->getArrayResult();
	}
}
